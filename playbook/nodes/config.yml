- hosts: nodes
  become: no
  gather_facts: yes
  tasks:
  - name: check if password is provided
    fail: msg="ansible-playbook main.yml --extra-vars 'admin_password=you-admin-password' "
    when: admin_password is undefined
  
  - name: Ensure Centos 7
    shell: echo $(more /etc/redhat-release | grep "CentOS Linux release 7" | wc -l)
    register: os_release
    failed_when: os_release.stdout == 0

  - name: Ensure below services are disabled
    systemd: name={{ item }} enabled=no
    with_items:
    - firewalld
    - iptables
    ignore_errors: command_result is defined and "'Could not find the requested service' in command_result.stderr"

  - name: Enable selinux
    selinux: policy=targeted state=enforcing

  - name: install packages
    yum: name={{ item }} state=present
    with_items:
    - epel-release
    - centos-release-gluster
    - wget 
    - git 
    - net-tools 
    - bind-utils
    - ethtool
    - iptables-services 
    - bridge-utils 
    - bash-completion
    - dnsmasq
    - ncurses-term
    - python
    - python-pip
    - pyOpenSSL
    - NetworkManager
    - heketi-client
    - heketi-templates
    - zsh
    - vim
    - gcc 

  - name: Ensure below services are enabled
    systemd: name={{ item }} enabled=yes state=started
    with_items:
    - NetworkManager

  - name: Ensure hostname set
    hostname: name={{ inventory_hostname }}
    when: not inventory_hostname|match('(\d{1,3}\.){3}\d{1,3}')

  - name: Ensure the latest pip is installed
    shell: pip install --upgrade pip  

  - name: 
    shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"    

  - name: install hi-cli
    shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/hi-cli/hi-cli/master/bin/install)"
    ignore_errors: command_result is defined and "'hi-cli is already installed' in command_result.stderr"
    
  - name: install hi modules
    shell: env hi package install {{ item }} force
    with_items:
    - centos
    - docker
    - ssh

  - set_fact:
      repoquery_cmd: "{{ 'dnf repoquery --latest-limit 1 -d 0' if ansible_pkg_mgr == 'dnf' else 'repoquery --plugins' }}"

  - set_fact: openshift_ansible_version=master
    when: openshift_ansible_version is undefined

  - set_fact: docker_version=1.12.6
    when: docker_version is undefined

  - name: Get current installed Docker version
    command: "{{ repoquery_cmd }} --installed --qf '%{version}' docker"
    register: curr_docker_version
    changed_when: false
    ignore_errors: command_result is defined and "'No such file or directory' in command_result.stderr"

  - set_fact: install_docker=true
    when: curr_docker_version.stdout != docker_version
    ignore_errors: command_result is defined and "'error while evaluating conditional' in command_result.stderr"

  - set_fact: docker_storage_device=/dev/sdb
    when: docker_storage_device is undefined

  - name: Install docker
    shell: env hi docker install all new storage={{ docker_storage_device }}
    when: install_docker is defined  